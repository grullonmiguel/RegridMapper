<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:options="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options"
                    mc:Ignorable="options"
                    xmlns:local="clr-namespace:RegridMapper.Core.Configuration">

    <!-- Includes -->
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/Styles/Geometry.xaml" />
    </ResourceDictionary.MergedDictionaries>
    
    <!--#region Font Sizes -->
    <sys:Double x:Key="Fonts.Small">12</sys:Double>
    <sys:Double x:Key="Fonts.Medium">14</sys:Double>
    <sys:Double x:Key="Fonts.Large">18</sys:Double>
    <sys:Double x:Key="Fonts.XLarge">22</sys:Double>
    <sys:Double x:Key="Fonts.XXLarge">26</sys:Double>
    <sys:Double x:Key="Fonts.XXXLarge">32</sys:Double>
    <!--#endregion-->
    
    <!--#region Colors/Brushes -->
    <Color x:Key="Theme.Primary">#FF8EE1C7</Color>
    <Color x:Key="Theme.Secondary">#FF52D1A9</Color>
    <Color x:Key="Theme.Tertiary">#FF289774</Color>
    <Color x:Key="Theme.Accent">#338EE1C7</Color>
    <Color x:Key="Theme.Background">#3E3E3E</Color>

    <Color x:Key="Theme.BackgroundPrimary">#FF282D33</Color>
    <Color x:Key="Theme.BackgroundSecondary">#FF373E46</Color>
    <Color x:Key="Theme.BackgroundTertiary">#FF292F34</Color>

    <Color x:Key="Theme.Foreground">#FFFFFF</Color>
    <Color x:Key="Theme.ForegroundSecondary">#DCF6ED</Color>
    <Color A="225" R="0" G="0" B="0" x:Key="Theme.Dialog" />

    <!-- Brushes for UI Elements -->
    <SolidColorBrush x:Key="Brushes.Primary" Color="{StaticResource Theme.Primary}" options:Freeze="True"/>
    <SolidColorBrush x:Key="Brushes.Secondary" Color="{StaticResource Theme.Secondary}" options:Freeze="True"/>
    <SolidColorBrush x:Key="Brushes.Tertiary" Color="{StaticResource Theme.Tertiary}" options:Freeze="True"/>
    <SolidColorBrush x:Key="Brushes.Accent" Color="{StaticResource Theme.Accent}" options:Freeze="True"/>
    <SolidColorBrush x:Key="Brushes.Background" Color="{StaticResource Theme.BackgroundPrimary}" options:Freeze="True"/>
    <SolidColorBrush x:Key="Brushes.BackgroundPrimary" Color="{StaticResource Theme.BackgroundPrimary}" options:Freeze="True" />
    <SolidColorBrush x:Key="Brushes.BackgroundSecondary" Color="{StaticResource Theme.BackgroundSecondary}" options:Freeze="True" />
    <SolidColorBrush x:Key="Brushes.BackgroundTertiary" Color="{StaticResource Theme.BackgroundTertiary}" options:Freeze="True" />
    <SolidColorBrush x:Key="Brushes.Foreground" Color="{StaticResource Theme.Foreground}" options:Freeze="True"/>
    <SolidColorBrush x:Key="Brushes.ForegroundSecondary" Color="{StaticResource Theme.ForegroundSecondary}" options:Freeze="True"/>
    <SolidColorBrush x:Key="Brushes.Dialog" Color="{StaticResource Theme.Dialog}" options:Freeze="True"/>
    <!--#endregion-->
 
    <!--#region Button -->
    <Style x:Key="Buttons.Base" TargetType="{x:Type Button}" >
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="FontSize" Value="{StaticResource Fonts.Medium}" />
        <Setter Property="Background" Value="{DynamicResource Brushes.Primary}" />
    </Style>
    <Style x:Key="Buttons.Primary" TargetType="{x:Type Button}" BasedOn="{StaticResource Buttons.Base}">
        <Setter Property="MinWidth" Value="120" />
        <Setter Property="MinHeight" Value="40" />
        <Setter Property="Background" Value="{DynamicResource Brushes.Tertiary}"/>
        <Setter Property="Foreground" Value="White" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border 
                        Padding="4,2" 
                        CornerRadius="4"  
                        BorderThickness="0" 
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" RecognizesAccessKey="True"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Cursor" Value="Hand"/>
                            <Setter Property="Background" Value="{StaticResource Brushes.Secondary}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{StaticResource Brushes.Tertiary}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value=".3"/>
                        </Trigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Buttons.Secondary" TargetType="{x:Type Button}" BasedOn="{StaticResource Buttons.Base}">
        <Setter Property="MinWidth" Value="120" />
        <Setter Property="MinHeight" Value="40" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Background" Value="{StaticResource Brushes.Accent}"/>
        <Setter Property="Foreground" Value="#FFFFFF" />
        <Setter Property="BorderBrush" Value="#FFFFFF" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border 
                        Padding="4,2" 
                        CornerRadius="4"  
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}" >
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" RecognizesAccessKey="True"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Cursor" Value="Hand"/>
                            <Setter Property="Foreground" Value="{StaticResource Brushes.Primary}"/>
                            <Setter Property="Background" Value="#FFFFFF"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Foreground" Value="#FFFFFF"/>
                            <Setter Property="BorderBrush" Value="{StaticResource Brushes.Secondary}"/>
                            <Setter Property="Background" Value="{StaticResource Brushes.Secondary}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value=".3"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Buttons.Icon"  TargetType="Button">
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Width" Value="32"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{StaticResource Brushes.Primary}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Viewbox Width="{TemplateBinding Width}">
                        <Border CornerRadius="4" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}">
                            <Path 
                                Width="24" Height="24"
                                Fill="{TemplateBinding Foreground}"
                                Data="M12 20C7.6 20 4 16.4 4 12S7.6 4 12 4 20 7.6 20 12 16.4 20 12 20M12 2C6.5 2 2 6.5 2 12S6.5 22 12 22 22 17.5 22 12 17.5 2 12 2M11 14H13V17H16V12H18L12 7L6 12H8V17H11V14" />
                        </Border>
                    </Viewbox>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Cursor" Value="Hand"/>
                            <Setter Property="Foreground" Value="{StaticResource Brushes.Secondary}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{StaticResource Brushes.Accent}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value=".3"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Buttons.Hyperlink" TargetType="Button">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="FontSize" Value="{StaticResource Fonts.Medium}"/>
        <Setter Property="Foreground" Value="{StaticResource Brushes.Primary}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <TextBlock Text="{TemplateBinding Content}" Foreground="{TemplateBinding Foreground}">
                        <TextBlock.Style>
                            <Style TargetType="TextBlock">
                                <Setter Property="TextDecorations" Value="{x:Null}"/>
                                <Style.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="TextDecorations" Value="Underline"/>
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </TextBlock.Style>
                    </TextBlock>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value=".3"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Buttons.Link" TargetType="Button">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="8 6"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="Foreground" Value="{StaticResource Brushes.Primary}"/>
        <Setter Property="Cursor" Value="Hand"/>

        <!-- Template to Display Icon and Text -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border CornerRadius="4" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}">
                        <StackPanel Orientation="Horizontal">
                            <!-- Icon from Tag -->
                            <Viewbox Width="16" Height="16">
                                <Path x:Name="icon" Data="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}}"/>
                            </Viewbox>
                            <TextBlock 
                                FontWeight="{TemplateBinding FontWeight}"
                                FontSize="{TemplateBinding FontSize}"
                                Foreground="{TemplateBinding Foreground}"
                                Text="{TemplateBinding Content}" Margin="6,0,0,0" />
                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{StaticResource Brushes.Accent}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{StaticResource Brushes.Tertiary}"/>
                            <Setter Property="Foreground" Value="{StaticResource Brushes.Foreground}"/>
                            <Setter TargetName="icon" Property="Fill" Value="{StaticResource Brushes.Foreground}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value=".3"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Buttons.Close" TargetType="Button" >
        <Setter Property="Padding" Value="4"/>
        <Setter Property="Width" Value="24"/>
        <Setter Property="ToolTip" Value="Close"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="#FFFFFF"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Viewbox Width="{TemplateBinding Width}">
                        <Border CornerRadius="4" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}">
                            <Canvas Width="24" Height="24">
                                <Path Fill="{TemplateBinding Foreground}" Data="{StaticResource Geometry.Close}" />
                            </Canvas>
                        </Border>
                    </Viewbox>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Cursor" Value="Hand"/>
                            <Setter Property="Background" Value="{StaticResource Brushes.Accent}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{StaticResource Brushes.Tertiary}"/>
                            <Setter Property="Foreground" Value="#FFFFFF"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value=".3"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->

    <!--#region Path -->
    <Style TargetType="Path">
        <Setter Property="Fill" Value="{StaticResource Brushes.Primary}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Fill" Value="{StaticResource Brushes.Secondary}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->

    <!--#region TextBlock -->
    <Style TargetType="{x:Type TextBlock}" x:Key="BaseTextBlockStyle">
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="FontSize" Value="{StaticResource Fonts.Medium}" />
        <Setter Property="Foreground" Value="{StaticResource Brushes.Foreground}" />
    </Style>

    <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource BaseTextBlockStyle}">
    </Style>

    <Style x:Key="TextBlocks.Heading1" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource BaseTextBlockStyle}">
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="FontSize" Value="{StaticResource Fonts.Large}" />
        <Setter Property="Foreground" Value="{StaticResource Brushes.ForegroundSecondary}" />
    </Style>
    <!--#endregion-->

    <!--#region Datagrid -->
    <Style TargetType="{x:Type Button}" x:Key="{ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle, TypeInTargetAssembly={x:Type DataGrid}}">
        <Setter Property="Foreground" Value="#FFFFFF" />
        <Setter Property="BorderThickness" Value="0 .5" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Background" Value="{StaticResource Brushes.Accent}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}">
                        <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Cursor" Value="Hand" />
                            <Setter Property="Background" Value="{StaticResource Brushes.Tertiary}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="DataGrid">
        <Setter Property="IsReadOnly" Value="True" />
        <Setter Property="AutoGenerateColumns" Value="False" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="CanUserAddRows" Value="False" />
        <Setter Property="CanUserDeleteRows" Value="False" />
        <Setter Property="GridLinesVisibility" Value="None" />
        <Setter Property="Background" Value="Transparent"/>
    </Style>
    <Style TargetType="{x:Type DataGridRowHeader}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="BorderThickness" Value="0 0 0 0.5"/>
        <Setter Property="Foreground" Value="{StaticResource Brushes.Primary}" />
        <Setter Property="Width" Value="40"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="FontSize" Value="{StaticResource Fonts.Small}" />
        <Setter Property="Background" Value="#4b5158" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridRowHeader}">
                    <Border 
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Background="{TemplateBinding Background}" 
                        Padding="{TemplateBinding Padding}">
                        <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="#FFFFFF" />
                            <Setter Property="Background" Value="{StaticResource Brushes.Primary}" />
                        </Trigger>
                        <Trigger Property="IsRowSelected" Value="True">
                            <Setter Property="Foreground" Value="#FFFFFF" />
                            <Setter Property="Background" Value="{StaticResource Brushes.Tertiary}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="Height" Value="48"/>
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="BorderThickness" Value="0 1"/>
        <Setter Property="FontSize" Value="{StaticResource Fonts.Medium}" />
        <Setter Property="Background" Value="#4B5158" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
                    <Border 
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}" 
                        BorderThickness="{TemplateBinding BorderThickness}" >
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                                <ColumnDefinition Width="auto" />
                            </Grid.ColumnDefinitions>
                            
                            <!-- Content-->
                            <ContentPresenter Margin="4 2" VerticalAlignment="Center" />
                            
                            <!-- Arrow -->
                            <Path x:Name="arrow" Stretch="Uniform" Visibility="Collapsed" 
                                  Data="M0,0 L1,0 0.5,1 z" Grid.Column="1"
                                  Fill="White" Stroke="White" StrokeThickness="2"
                                  Width="6" Height="6" Margin="0 0 8 0"
                                  VerticalAlignment="Center" RenderTransformOrigin="0.5,0.5">
                                <Path.RenderTransform>
                                    <RotateTransform Angle="0" />
                                </Path.RenderTransform>
                            </Path>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{StaticResource Brushes.Secondary}"/>
                        </MultiTrigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{StaticResource Brushes.Tertiary}"/>
                        </Trigger>
                        <Trigger Property="SortDirection" Value="Ascending">
                            <Setter TargetName="arrow" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="arrow" Property="RenderTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="180" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>

                        <Trigger Property="SortDirection" Value="Descending">
                            <Setter TargetName="arrow" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type DataGridRow}">
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Background" Value="{StaticResource Brushes.BackgroundSecondary}"/>
    </Style>
    <Style TargetType="{x:Type DataGridCell}">
        <Setter Property="Height" Value="30"/>
        <Setter Property="BorderThickness" Value="0 0 0 .5"/>
        <Setter Property="BorderBrush" Value="#4b5158" />
        <Setter Property="FontSize" Value="{StaticResource Fonts.Medium}" />
        <Setter Property="Foreground" Value="{StaticResource Brushes.ForegroundSecondary}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Border BorderThickness="{TemplateBinding BorderThickness}" 
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Background="{TemplateBinding Background}">
                        <ContentPresenter Margin="4 2" VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="{StaticResource Brushes.Accent}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type DataGridRow}" x:Key="DataGridRowAlternate">
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Background" Value="Transparent"/>
    </Style>
    <Style TargetType="{x:Type DataGridCell}" x:Key="DataGridCellAlternate">
        <Setter Property="Height" Value="32"/>
        <Setter Property="BorderThickness" Value="0 0 0 .5"/>
        <Setter Property="BorderBrush" Value="{StaticResource Brushes.Primary}" />
        <Setter Property="FontSize" Value="{StaticResource Fonts.Medium}" />
        <Setter Property="Foreground" Value="{StaticResource Brushes.ForegroundSecondary}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Border BorderThickness="{TemplateBinding BorderThickness}" 
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Background="{TemplateBinding Background}">
                        <ContentPresenter Margin="4 2" VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="{StaticResource Brushes.Accent}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->
    
    <!--#region ComboBox-->
    <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="20" />
            </Grid.ColumnDefinitions>
            <Border x:Name="Border" 
                    Grid.ColumnSpan="2"
                    CornerRadius="0"
                    BorderThickness="1"
                    BorderBrush="#FFFFFF"
                    Background="{StaticResource Brushes.Background}" />
            <Border Grid.Column="0"
                    CornerRadius="0" 
                    Margin="1" 
                    BorderThickness="0,0,1,0" 
                    BorderBrush="#FFFFFF"
                    Background="{StaticResource Brushes.Background}" />
            <Path x:Name="Arrow"
                    Grid.Column="1"     
                    Fill="#FFFFFF"
                    VerticalAlignment="Center"
                    HorizontalAlignment="Center"
                    Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsMouseOver" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{StaticResource Brushes.Accent}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource Brushes.Primary}" />
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{StaticResource Brushes.Secondary}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value=".3"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
        <Border x:Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Background}" />
    </ControlTemplate>

    <Style x:Key="{x:Type ComboBox}" TargetType="{x:Type ComboBox}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="MinWidth" Value="120"/>
        <Setter Property="MinHeight" Value="28"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <ToggleButton 
                                Name="ToggleButton" 
                                Template="{StaticResource ComboBoxToggleButton}" 
                                Grid.Column="2" 
                                Focusable="false"
                                IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                                ClickMode="Press">
                        </ToggleButton>
                        <ContentPresenter Name="ContentSite" IsHitTestVisible="False"  Content="{TemplateBinding SelectionBoxItem}"
                                ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                Margin="8,4,23,4"
                                VerticalAlignment="Center"
                                HorizontalAlignment="Left" />
                        <TextBox x:Name="PART_EditableTextBox"
                                Style="{x:Null}" 
                                Template="{StaticResource ComboBoxTextBox}" 
                                HorizontalAlignment="Left" 
                                VerticalAlignment="Center" 
                                Margin="3,3,23,3"
                                Focusable="True" 
                                Background="#FF3F3F3F"
                                Foreground="Green"
                                Visibility="Hidden"
                                IsReadOnly="{TemplateBinding IsReadOnly}"/>
                        <Popup 
                                Name="Popup"
                                Placement="Bottom"
                                IsOpen="{TemplateBinding IsDropDownOpen}"
                                AllowsTransparency="True" 
                                Focusable="False"
                                PopupAnimation="Slide">

                            <Grid Name="DropDown"
                                  SnapsToDevicePixels="True"                
                                  MinWidth="{TemplateBinding ActualWidth}"
                                  MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border 
                                    x:Name="DropDownBorder"
                                    Background="{StaticResource Brushes.Background}"
                                    BorderBrush="#FFFFFF"
                                    BorderThickness="1 0 1 1"/>
                                <ScrollViewer Margin="0" SnapsToDevicePixels="True">
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#888888"/>
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>
                        <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                            <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="0"/>
                            <Setter TargetName="DropDownBorder" Property="Margin" Value="0,0,0,0"/>
                        </Trigger>
                        <Trigger Property="IsEditable"  Value="true">
                            <Setter Property="IsTabStop" Value="false"/>
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type ComboBoxItem}" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="FontSize" Value="{StaticResource Fonts.Medium}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border Name="Border" Background="Transparent" Padding="8" HorizontalAlignment="Stretch" SnapsToDevicePixels="true">
                        <ContentPresenter />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource Brushes.Accent}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#888888"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->
    
    <!--#region Context Menu Style -->
    <Style x:Key="ContextMenuStyle" TargetType="ContextMenu">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="FontSize" Value="{StaticResource Fonts.Medium}"/>
        <Setter Property="Foreground" Value="{StaticResource Brushes.ForegroundSecondary}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ContextMenu">
                    <Border x:Name="MainMenu" Background="#535353">
                        <StackPanel ClipToBounds="True" IsItemsHost="True"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Menu Item Style -->
    <!--<Style x:Key="MenuItemStyle" TargetType="MenuItem">
        <Setter Property="Padding" Value="4"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Foreground" Value="{StaticResource Brushes.ForegroundSecondary}" />

        --><!-- Hover effect --><!--
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="red"/>
                --><!-- Slightly lighter hover --><!--
                <Setter Property="Foreground" Value="LightGray"/>
            </Trigger>
        </Style.Triggers>
    </Style>-->

    <Style x:Key="MenuItemStyle" TargetType="MenuItem">
        <Setter Property="Padding" Value="16 4"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Background" Value="#2B2B2B"/>
        <Setter Property="FontSize" Value="{StaticResource Fonts.Medium}"/>
        <Setter Property="Foreground" Value="{StaticResource Brushes.ForegroundSecondary}"/>

        <!-- Template for Custom Icon Styling -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="MenuItem">
                    <Border Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}">
                        <Grid >
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <!-- Icon Column -->
                                <ColumnDefinition Width="*"/>
                                <!-- Text Column -->
                            </Grid.ColumnDefinitions>

                            <!-- Icon Background -->
                            <Border x:Name="box" Grid.Column="0" Background="Transparent" Padding="0" CornerRadius="0">
                                <ContentPresenter ContentSource="Icon"/>
                            </Border>

                            <!-- Menu Item Text -->
                            <TextBlock 
                                Grid.Column="1" 
                                Text="{TemplateBinding Header}" 
                                Padding="{TemplateBinding Padding}" 
                                FontSize="{TemplateBinding FontSize}"
                                Foreground="{TemplateBinding Foreground}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{StaticResource Brushes.Accent}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion-->
    
    <!--#region DatePicker-->   
    <Style TargetType="CalendarDayButton" x:Key="SelectedDateStyle">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{StaticResource Brushes.Background}"/>
                <Setter Property="BorderThickness" Value="0"/>
            </Trigger>
            <Trigger Property="IsToday" Value="True">
                <Setter Property="Background" Value="#80000000"/>
                <Setter Property="FontWeight" Value="Bold"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="Calendar" x:Key="PopupCalendarStyle">
        <Setter Property="Background" Value="{StaticResource Brushes.Background}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="FontSize" Value="{StaticResource Fonts.Medium}"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="CalendarDayButtonStyle" Value="{StaticResource SelectedDateStyle}"/>
    </Style>

    <Style TargetType="{x:Type DatePicker}">
        <Setter Property="Foreground" Value="#FFFFFFFF" />
        <Setter Property="IsTodayHighlighted" Value="True" />
        <Setter Property="SelectedDateFormat" Value="Short" />
        <Setter Property="Padding" Value="8 4" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="#FFFFFF" />
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="FontSize" Value="{StaticResource Fonts.Medium}"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="DisplayDateStart" Value="{x:Static sys:DateTime.Today}" />
        <Setter Property="CalendarStyle" Value="{StaticResource PopupCalendarStyle}"/>
    </Style>
    <Style TargetType="DatePickerTextBox">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="IsReadOnly" Value="True" />
        <Setter Property="IsHitTestVisible" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DatePickerTextBox}">
                    <Grid>
                        <Grid.Resources>
                            <SolidColorBrush x:Key="WatermarkBrush" Color="Red"/>
                        </Grid.Resources>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0"/>
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="WatermarkStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Unwatermarked"/>
                                <VisualState x:Name="Watermarked">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="0" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="ContentElement"/>
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="PART_Watermark"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Unfocused"/>
                                <VisualState x:Name="Focused" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="1" Opacity="1" Padding="{TemplateBinding Padding}">
                            <Grid x:Name="WatermarkContent" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                <Border x:Name="ContentElement" BorderBrush="#FFFFFFFF" BorderThickness="0"/>
                                <Border x:Name="watermark_decorator" BorderBrush="#FFFFFFFF" BorderThickness="0">
                                    <ContentControl x:Name="PART_Watermark" Focusable="False" IsHitTestVisible="False" Opacity="0" Padding="2"/>
                                </Border>
                                <ScrollViewer x:Name="PART_ContentHost" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="0" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Grid>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion-->

    <!--#region Borders -->
    <Style x:Key="Borders.Primary" TargetType="Border" >
        <Setter Property="Padding" Value="16"/>
        <Setter Property="Background" Value="{DynamicResource Brushes.BackgroundPrimary}"/>
    </Style>

    <Style x:Key="Borders.Secondary" TargetType="Border" >
        <Setter Property="CornerRadius" Value="8 8 8 8"/>
        <Setter Property="Background" Value="{DynamicResource Brushes.BackgroundSecondary}"/>
    </Style>

    <Style x:Key="Borders.Tertiary" TargetType="Border" >
        <Setter Property="CornerRadius" Value="8 8 8 8"/>
        <Setter Property="Background" Value="{DynamicResource Brushes.BackgroundTertiary}"/>
    </Style>
    <!--#endregion-->
    
    <!--#region ContentControl -->

    <Style x:Key="AppLogo" TargetType="ContentControl">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ContentControl">
                    <StackPanel Orientation="Horizontal">

                        <!-- TextBlock: Displays application icon-->
                        <Viewbox Height="32">
                            <Canvas Width="177px" Height="168px" >
                                <Path Fill="{StaticResource Brushes.Primary}" 
                                      Data="M 46.5,6.5 C 62.0005,4.16577 75.8338,7.83243 88,17.5C 100.165,7.66688 113.998,4.16688 129.5,7C 153.163,13.4945 165.496,28.9945 166.5,53.5C 166.756,65.0623 163.423,75.3957 156.5,84.5C 168.841,103.324 169.674,122.658 159,142.5C 142.476,162.756 121.976,167.923 97.5,158C 94.073,156.204 90.9063,154.037 88,151.5C 75.8704,161.324 62.0371,164.824 46.5,162C 22.8374,155.505 10.5041,140.005 9.5,115.5C 9.46944,110.765 9.96944,106.099 11,101.5C 13.3243,95.5181 16.1576,89.8515 19.5,84.5C 9.18936,69.8358 6.68936,53.8358 12,36.5C 18.4445,20.5498 29.9445,10.5498 46.5,6.5 Z M 50.5,18.5 C 74.964,17.6366 88.6306,29.3032 91.5,53.5C 91.5014,62.0061 88.668,69.3394 83,75.5C 65.3333,66.1667 47.6667,66.1667 30,75.5C 19.0357,61.194 18.7023,46.5273 29,31.5C 34.9276,24.9598 42.0943,20.6265 50.5,18.5 Z M 113.5,18.5 C 140.974,18.4732 154.474,32.1399 154,59.5C 147.483,82.0125 132.65,91.1792 109.5,87C 104.509,85.5088 100.176,83.0088 96.5,79.5C 105.83,62.2038 105.83,44.8704 96.5,27.5C 101.507,23.164 107.174,20.164 113.5,18.5 Z M 50.5,80.5 C 61.5624,79.3435 71.229,82.3435 79.5,89.5C 70.1701,106.87 70.1701,124.204 79.5,141.5C 64.9653,152.902 49.9653,153.402 34.5,143C 19.4292,127.988 17.5959,111.488 29,93.5C 34.9276,86.9598 42.0943,82.6265 50.5,80.5 Z M 91.5,93.5 C 96.0577,95.4122 100.724,97.2455 105.5,99C 119.782,102.383 133.282,100.55 146,93.5C 156.964,107.806 157.298,122.473 147,137.5C 131.988,152.571 115.488,154.404 97.5,143C 82.603,128.072 80.603,111.572 91.5,93.5 Z"/>
                            </Canvas>
                        </Viewbox>

                        <!-- TextBlock: Displays application description -->
                        <TextBlock 
                            Margin="8 0 0 0"
                            Text="Virtual Assistant" 
                            Foreground="{StaticResource Brushes.Primary}" 
                            Style="{StaticResource TextBlocks.Heading1}"/>

                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ScrapeStatusStyle" TargetType="ContentControl">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate  TargetType="ContentControl">
                    <Border BorderThickness="0" Padding="4" CornerRadius="8" Background="{TemplateBinding Background}">
                        <StackPanel Orientation="Horizontal">
                            <Viewbox Width="14" Height="14">
                                <Path x:Name="StatusIcon" />
                            </Viewbox>
                            <TextBlock 
                                x:Name="StatusText" Foreground="#FFFFFF" Margin="8 0 0 0"
                                VerticalAlignment="Center" FontSize="{StaticResource Fonts.Small}" />
                        </StackPanel>
                    </Border>
                    <!-- DataTriggers to change UI based on ScrapeStatus -->
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding ScrapeStatus}" Value="Complete">
                            <Setter Property="Background" Value="#4B5158" />
                            <Setter TargetName="StatusIcon" Property="Data" Value="{StaticResource Geometry.Checkmark}" />
                            <Setter TargetName="StatusIcon" Property="Fill" Value="{StaticResource Brushes.Primary}" />
                            <Setter TargetName="StatusText" Property="Text" Value="Complete" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding ScrapeStatus}" Value="MultipleMatches">
                            <Setter Property="Background" Value="#4B5158" />
                            <Setter TargetName="StatusIcon" Property="Data" Value="{StaticResource Geometry.Alert}" />
                            <Setter TargetName="StatusIcon" Property="Fill" Value="#F6DD65" />
                            <Setter TargetName="StatusText" Property="Text" Value="Multiple Matches" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding ScrapeStatus}" Value="NotFound">
                            <Setter Property="Background" Value="#4B5158" />
                            <Setter TargetName="StatusIcon" Property="Data" Value="{StaticResource Geometry.Error}" />
                            <Setter TargetName="StatusIcon" Property="Fill" Value="#F1948A" />
                            <Setter TargetName="StatusText" Property="Text" Value="Not Found" />
                        </DataTrigger>
                        </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>
    <!--#endregion-->

    <!--#region RadioButton -->

    <Style TargetType="RadioButton">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RadioButton">
                    <Border 
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Padding="{TemplateBinding Padding}">
                        <Grid>
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!-- Default Appearance -->
        <Setter Property="Foreground" Value="#FFFFFF"/>
        <Setter Property="FontSize" Value="{StaticResource Fonts.Medium}"/>
        <Setter Property="Padding" Value="10,5"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>

        <Style.Triggers>
            <!-- Hover Effect -->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="White"/>
            </Trigger>

            <!-- Pressed Effect -->
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{StaticResource Brushes.Accent}"/>
            </Trigger>

            <!-- Selected Effect -->
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="{StaticResource Brushes.Accent}"/>
                <Setter Property="BorderBrush" Value="{StaticResource Brushes.Accent}"/>
                <Setter Property="Foreground" Value="{StaticResource Brushes.Primary}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Color x:Key="Theme.BackgroundDeed">#14161B</Color>
    <Color x:Key="Theme.BackgroundLien">#23272F</Color>
    <Color x:Key="Theme.BackgroundRedeem">#191C22</Color>
    <Color x:Key="Theme.BackgroundHybrid">#000000</Color>

    <SolidColorBrush x:Key="Brushes.BackgroundDeed" Color="{StaticResource Theme.BackgroundDeed}" options:Freeze="True" />
    <SolidColorBrush x:Key="Brushes.BackgroundLien" Color="{StaticResource Theme.BackgroundLien}" options:Freeze="True" />
    <SolidColorBrush x:Key="Brushes.BackgroundRedeem" Color="{StaticResource Theme.BackgroundRedeem}" options:Freeze="True" />
    <SolidColorBrush x:Key="Brushes.BackgroundHybrid" Color="{StaticResource Theme.BackgroundHybrid}" options:Freeze="True" />

    <Style x:Key="RadioButtons.State" TargetType="{x:Type RadioButton}">
        <Setter Property="GroupName" Value="rdoStates" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Background" Value="{DynamicResource Brushes.Background}"/>
        <Setter Property="ToolTipService.InitialShowDelay" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RadioButton">
                    <Grid>
                        <Path 
                            x:Name="path"
                            ToolTip="{TemplateBinding Tag}"  
                            StrokeThickness=".5"
                            Stroke="#33D5D3D8" >
                            <Path.Style>
                                <Style TargetType="Path">
                                    <Style.Triggers>
                                        <!-- Alabama -->
                                        <DataTrigger Binding="{Binding StateID}" Value="AL" >
                                            <Setter Property="Data" Value="{DynamicResource Geometry.AL}"/>
                                        </DataTrigger>
                                        <!-- Alaska -->
                                        <DataTrigger Binding="{Binding StateID}" Value="AK" >
                                            <Setter Property="Data" Value="{DynamicResource Geometry.AK}"/>
                                            <!--<Setter Property="Margin" Value="958,100,0,320"  />
                                            <Setter Property="Stretch" Value="Fill"  />-->
                                        </DataTrigger>
                                        <!-- Arizona -->
                                        <DataTrigger Binding="{Binding StateID}" Value="AZ" >
                                            <Setter Property="Data" Value="{DynamicResource Geometry.AZ}"/>
                                        </DataTrigger>
                                        <!-- Arkansas -->
                                        <DataTrigger Binding="{Binding StateID}" Value="AR" >
                                            <Setter Property="Data" Value="{DynamicResource Geometry.AR}"/>
                                        </DataTrigger>
                                        <!-- California -->
                                        <DataTrigger Binding="{Binding StateID}" Value="CA" >
                                            <Setter Property="Data" Value="{DynamicResource Geometry.CA}"/>
                                        </DataTrigger>
                                        <!-- Colorado -->
                                        <DataTrigger Binding="{Binding StateID}" Value="CO" >
                                            <Setter Property="Data" Value="{DynamicResource Geometry.CO}" />
                                        </DataTrigger>
                                        <!-- Connecticut -->
                                        <DataTrigger Binding="{Binding StateID}" Value="CT" >
                                            <Setter Property="Data" Value="{DynamicResource Geometry.CT}" />
                                        </DataTrigger>
                                        <!-- D.C. -->
                                        <DataTrigger Binding="{Binding StateID}" Value="DC" >
                                            <Setter Property="Data" Value="{DynamicResource Geometry.DC}" />
                                        </DataTrigger>
                                        <!-- Delaware -->
                                        <DataTrigger Binding="{Binding StateID}" Value="DE" >
                                            <Setter Property="Data" Value="{DynamicResource Geometry.DE}" />
                                        </DataTrigger>
                                        <!-- Florida -->
                                        <DataTrigger Binding="{Binding StateID}" Value="FL" >
                                            <Setter Property="Data" Value="{DynamicResource Geometry.FL}" />
                                        </DataTrigger>
                                        <!-- Georgia -->
                                        <DataTrigger Binding="{Binding StateID}" Value="GA" >
                                            <Setter Property="Data" Value="{DynamicResource Geometry.GA}" />
                                        </DataTrigger>
                                        <!-- Hawaii -->
                                        <DataTrigger Binding="{Binding StateID}" Value="HI" >
                                            <Setter Property="Data" Value="{DynamicResource Geometry.HI}" />
                                            <!--<Setter Property="Margin" Value="985,400,50,105"  />
                                            <Setter Property="Stretch" Value="Fill"  />-->
                                        </DataTrigger>
                                        <!-- Idaho -->
                                        <DataTrigger Binding="{Binding StateID}" Value="ID" >
                                            <Setter Property="Data" Value="{DynamicResource Geometry.ID}" />
                                        </DataTrigger>
                                        <!-- Illinois -->
                                        <DataTrigger Binding="{Binding StateID}" Value="IL" >
                                            <Setter Property="Data" Value="{DynamicResource Geometry.IL}" />
                                        </DataTrigger>
                                        <!-- Indiana -->
                                        <DataTrigger Binding="{Binding StateID}" Value="IN" >
                                            <Setter Property="Data" Value="{DynamicResource Geometry.IN}" />
                                        </DataTrigger>
                                        <!-- Iowa -->
                                        <DataTrigger Binding="{Binding StateID}" Value="IA" >
                                            <Setter Property="Data" Value="{DynamicResource Geometry.IA}" />
                                        </DataTrigger>
                                        <!-- Kansas -->
                                        <DataTrigger Binding="{Binding StateID}" Value="KS" >
                                            <Setter Property="Data" Value="{DynamicResource Geometry.KS}" />
                                        </DataTrigger>
                                        <!-- Kentucky -->
                                        <DataTrigger Binding="{Binding StateID}" Value="KY" >
                                            <Setter Property="Data" Value="{DynamicResource Geometry.KY}" />
                                        </DataTrigger>
                                        <!-- Louisiana -->
                                        <DataTrigger Binding="{Binding StateID}" Value="LA" >
                                            <Setter Property="Data" Value="{DynamicResource Geometry.LA}" />
                                        </DataTrigger>
                                        <!-- Massachusetts -->
                                        <DataTrigger Binding="{Binding StateID}" Value="MA" >
                                            <Setter Property="Data" Value="{DynamicResource Geometry.MA}" />
                                        </DataTrigger>
                                        <!-- Maryland -->
                                        <DataTrigger Binding="{Binding StateID}" Value="MD" >
                                            <Setter Property="Data" Value="{DynamicResource Geometry.MD}" />
                                        </DataTrigger>
                                        <!-- Maine -->
                                        <DataTrigger Binding="{Binding StateID}" Value="ME" >
                                            <Setter Property="Data" Value="{DynamicResource Geometry.ME}" />
                                        </DataTrigger>
                                        <!-- Michigan -->
                                        <DataTrigger Binding="{Binding StateID}" Value="MI" >
                                            <Setter Property="Data" Value="{DynamicResource Geometry.MI}" />
                                        </DataTrigger>
                                        <!-- Minnesota -->
                                        <DataTrigger Binding="{Binding StateID}" Value="MN" >
                                            <Setter Property="Data" Value="{DynamicResource Geometry.MN}" />
                                        </DataTrigger>
                                        <!-- Missouri -->
                                        <DataTrigger Binding="{Binding StateID}" Value="MO" >
                                            <Setter Property="Data" Value="{DynamicResource Geometry.MO}" />
                                        </DataTrigger>
                                        <!-- Mississippi -->
                                        <DataTrigger Binding="{Binding StateID}" Value="MS" >
                                            <Setter Property="Data" Value="{DynamicResource Geometry.MS}" />
                                        </DataTrigger>
                                        <!-- Montana -->
                                        <DataTrigger Binding="{Binding StateID}" Value="MT" >
                                            <Setter Property="Data" Value="{DynamicResource Geometry.MT}" />
                                        </DataTrigger>
                                        <!-- North Carolina -->
                                        <DataTrigger Binding="{Binding StateID}" Value="NC" >
                                            <Setter Property="Data" Value="{DynamicResource Geometry.NC}" />
                                        </DataTrigger>
                                        <!-- North Dakota -->
                                        <DataTrigger Binding="{Binding StateID}" Value="ND" >
                                            <Setter Property="Data" Value="{DynamicResource Geometry.ND}" />
                                        </DataTrigger>
                                        <!-- Nebraska -->
                                        <DataTrigger Binding="{Binding StateID}" Value="NE" >
                                            <Setter Property="Data" Value="{DynamicResource Geometry.NE}" />
                                        </DataTrigger>
                                        <!-- New Hampshire -->
                                        <DataTrigger Binding="{Binding StateID}" Value="NH" >
                                            <Setter Property="Data" Value="{DynamicResource Geometry.NH}" />
                                        </DataTrigger>
                                        <!-- New Jersey -->
                                        <DataTrigger Binding="{Binding StateID}" Value="NJ" >
                                            <Setter Property="Data" Value="{DynamicResource Geometry.NJ}" />
                                        </DataTrigger>
                                        <!-- New Mexico -->
                                        <DataTrigger Binding="{Binding StateID}" Value="NM" >
                                            <Setter Property="Data" Value="{DynamicResource Geometry.NM}" />
                                        </DataTrigger>
                                        <!-- Nevada -->
                                        <DataTrigger Binding="{Binding StateID}" Value="NV" >
                                            <Setter Property="Data" Value="{DynamicResource Geometry.NV}" />
                                        </DataTrigger>
                                        <!-- New York -->
                                        <DataTrigger Binding="{Binding StateID}" Value="NY" >
                                            <Setter Property="Data" Value="{DynamicResource Geometry.NY}" />
                                        </DataTrigger>
                                        <!-- Oklahoma -->
                                        <DataTrigger Binding="{Binding StateID}" Value="OK" >
                                            <Setter Property="Data" Value="{DynamicResource Geometry.OK}" />
                                        </DataTrigger>
                                        <!-- Ohio -->
                                        <DataTrigger Binding="{Binding StateID}" Value="OH" >
                                            <Setter Property="Data" Value="{DynamicResource Geometry.OH}" />
                                        </DataTrigger>
                                        <!-- Oregon -->
                                        <DataTrigger Binding="{Binding StateID}" Value="OR" >
                                            <Setter Property="Data" Value="{DynamicResource Geometry.OR}" />
                                        </DataTrigger>
                                        <!-- Pennsylvania -->
                                        <DataTrigger Binding="{Binding StateID}" Value="PA" >
                                            <Setter Property="Data" Value="{DynamicResource Geometry.PA}" />
                                        </DataTrigger>
                                        <!-- Rhode Island -->
                                        <DataTrigger Binding="{Binding StateID}" Value="RI" >
                                            <Setter Property="Data" Value="{DynamicResource Geometry.RI}" />
                                        </DataTrigger>
                                        <!-- South Carolina -->
                                        <DataTrigger Binding="{Binding StateID}" Value="SC" >
                                            <Setter Property="Data" Value="{DynamicResource Geometry.SC}" />
                                        </DataTrigger>
                                        <!-- South Dakota -->
                                        <DataTrigger Binding="{Binding StateID}" Value="SD" >
                                            <Setter Property="Data" Value="{DynamicResource Geometry.SD}" />
                                        </DataTrigger>
                                        <!-- Tennessee -->
                                        <DataTrigger Binding="{Binding StateID}" Value="TN" >
                                            <Setter Property="Data" Value="{DynamicResource Geometry.TN}" />
                                        </DataTrigger>
                                        <!-- Texas -->
                                        <DataTrigger Binding="{Binding StateID}" Value="TX" >
                                            <Setter Property="Data" Value="{DynamicResource Geometry.TX}" />
                                        </DataTrigger>
                                        <!-- Utah -->
                                        <DataTrigger Binding="{Binding StateID}" Value="UT" >
                                            <Setter Property="Data" Value="{DynamicResource Geometry.UT}" />
                                        </DataTrigger>
                                        <!-- Vermont -->
                                        <DataTrigger Binding="{Binding StateID}" Value="VT" >
                                            <Setter Property="Data" Value="{DynamicResource Geometry.VT}" />
                                        </DataTrigger>
                                        <!-- Virginia -->
                                        <DataTrigger Binding="{Binding StateID}" Value="VA" >
                                            <Setter Property="Data" Value="{DynamicResource Geometry.VA}" />
                                        </DataTrigger>
                                        <!-- Washington -->
                                        <DataTrigger Binding="{Binding StateID}" Value="WA" >
                                            <Setter Property="Data" Value="{DynamicResource Geometry.WA}" />
                                        </DataTrigger>
                                        <!-- West Virginia -->
                                        <DataTrigger Binding="{Binding StateID}" Value="WV" >
                                            <Setter Property="Data" Value="{DynamicResource Geometry.WV}" />
                                        </DataTrigger>
                                        <!-- Wisconsin -->
                                        <DataTrigger Binding="{Binding StateID}" Value="WI" >
                                            <Setter Property="Data" Value="{DynamicResource Geometry.WI}" />
                                        </DataTrigger>
                                        <!-- Wyoming -->
                                        <DataTrigger Binding="{Binding StateID}" Value="WY" >
                                            <Setter Property="Data" Value="{DynamicResource Geometry.WY}" />
                                        </DataTrigger>
                                        <!-- Deed -->
                                        <DataTrigger Binding="{Binding SalesType}" Value="{x:Static local:SaleTypeCode.Deed}" >
                                            <Setter Property="Fill" Value="{DynamicResource Brushes.BackgroundDeed}" />
                                        </DataTrigger>
                                        <!-- Lien -->
                                        <DataTrigger Binding="{Binding SalesType}" Value="{x:Static local:SaleTypeCode.Lien}" >
                                            <Setter Property="Fill" Value="{DynamicResource Brushes.BackgroundLien}" />
                                        </DataTrigger>
                                        <!-- Redeemable -->
                                        <DataTrigger Binding="{Binding SalesType}" Value="{x:Static local:SaleTypeCode.Redeemable}" >
                                            <Setter Property="Fill" Value="{DynamicResource Brushes.BackgroundRedeem}" />
                                        </DataTrigger>
                                        <!-- Hybrid -->
                                        <DataTrigger Binding="{Binding SalesType}" Value="{x:Static local:SaleTypeCode.Hybrid}" >
                                            <Setter Property="Fill" Value="{DynamicResource Brushes.BackgroundHybrid}" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Path.Style>
                        </Path>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="path" Property="StrokeThickness" Value="1"/>
                            <Setter TargetName="path" Property="Stroke" Value="{StaticResource Brushes.Primary}"/>
                        </Trigger>
                        <Trigger Property="IsMouseCaptured" Value="True">
                            <Setter Property="Background" Value="{StaticResource Brushes.Accent}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="path" Property="StrokeThickness" Value="1"/>
                            <Setter TargetName="path" Property="Fill" Value="{StaticResource Brushes.Secondary}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value=".25"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->

    <DataTemplate x:Key="USMapTemplate">
        <Viewbox VerticalAlignment="Top">
            <ItemsControl 
                 Style="{x:Null}"  
                 Grid.IsSharedSizeScope="True"
                 ItemsSource="{Binding States}" 
                 ScrollViewer.HorizontalScrollBarVisibility="Disabled">
                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <Grid />
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
                <ItemsControl.ItemTemplate>
                    <DataTemplate>
                        <RadioButton 
                             ToolTipService.InitialShowDelay="30000"
                             Tag="{Binding Name}" 
                             Content="{Binding StateID}" 
                             IsChecked="{Binding IsSelected}"
                             Style="{DynamicResource RadioButtons.State}" 
                             Command="{Binding DataContext.StateSelectedCommand, RelativeSource={RelativeSource AncestorType=UserControl}}" 
                             CommandParameter="{Binding StateID}"/>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>
        </Viewbox>
    </DataTemplate>

</ResourceDictionary>